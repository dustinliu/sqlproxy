package sqlproxy.client

import mu.KotlinLogging
import sqlproxy.proto.Common
import sqlproxy.proto.RequestOuterClass
import sqlproxy.proto.ResponseOuterClass
import java.net.InetSocketAddress
import java.net.Socket
import java.sql.*
import java.util.*
import java.util.concurrent.Executor

class SQLProxyConnection(url: String): Connection {
    companion object {
        private val logger = KotlinLogging.logger {}
    }

    private val socket = Socket()
    private var sessionId: Long
    private var isClosed = false

    init {
        val pair = parseUrl(url)
        val isa = InetSocketAddress(pair.first, pair.second)
        socket.connect(isa, 5000)
        val request = RequestOuterClass.Request.newBuilder().apply {
            meta = Common.Meta.newBuilder().setId(UUID.randomUUID().toString()).build()
            event = RequestOuterClass.Request.Event.CONNECT
        }.build()

        logger.trace { "request id: ${request.meta.id}" }
        logger.trace { "request session: ${request.meta.session}" }
        request.writeDelimitedTo(socket.getOutputStream())

        val response = ResponseOuterClass.Response.parseDelimitedFrom(socket.getInputStream())
        if (response.meta.session == null) {
            throw SQLException("connect failed, session id is null")
        }

        if (response.status.code != ResponseOuterClass.Status.StatusCode.SUCCESS) {
            throw RuntimeException(response.status.message)
        }

        sessionId = response.meta.session
        logger.trace { "response id: ${response.meta.id}" }
        logger.trace { "response session: ${response.meta.session}" }
    }

    override fun prepareStatement(sql: String?): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareStatement(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun rollback() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun rollback(savepoint: Savepoint?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getHoldability(): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun commit() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setTransactionIsolation(level: Int) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun abort(executor: Executor?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareCall(sql: String?): CallableStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun prepareCall(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): CallableStatement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getClientInfo(name: String?): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getClientInfo(): Properties {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getAutoCommit(): Boolean {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setCatalog(catalog: String?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getWarnings(): SQLWarning {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getCatalog(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setHoldability(holdability: Int) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getSchema(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun isValid(timeout: Int): Boolean {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun close() {
        val request = RequestOuterClass.Request.newBuilder().apply {
            meta = Common.Meta.newBuilder()
                .setId(UUID.randomUUID().toString())
                .setSession(sessionId)
                .build()
            event = RequestOuterClass.Request.Event.CLOSE
        }.build()

        logger.trace { "request id: ${request.meta.id}" }
        logger.trace { "request session: ${request.meta.session}" }
        request.writeDelimitedTo(socket.getOutputStream())

        val response = ResponseOuterClass.Response.parseDelimitedFrom(socket.getInputStream())
        sessionId = response.meta.session
        logger.trace { "response id: ${response.meta.id}" }
        logger.trace { "response session: ${response.meta.session}" }
        socket.close()
        isClosed = true
    }

    fun unsafeClose() {
        socket.close()
    }

    override fun isClosed(): Boolean {
        return isClosed
    }

    override fun createNClob(): NClob {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createBlob(): Blob {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setReadOnly(readOnly: Boolean) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun nativeSQL(sql: String?): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setClientInfo(name: String?, value: String?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setClientInfo(properties: Properties?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun releaseSavepoint(savepoint: Savepoint?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createClob(): Clob {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun isReadOnly(): Boolean {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createStatement(): Statement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setSavepoint(): Savepoint {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setSavepoint(name: String?): Savepoint {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getTypeMap(): MutableMap<String, Class<*>> {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun clearWarnings() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getMetaData(): DatabaseMetaData {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getTransactionIsolation(): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setSchema(schema: String?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getNetworkTimeout(): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun createSQLXML(): SQLXML {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}

fun parseUrl(url: String): Pair<String, Int> {
    val cleanURI = url.substring(SQLProxyDriver.prefix.length)
    val uri = java.net.URI.create(cleanURI)
    return Pair(uri.host, uri.port)
}
